function CallContextEntry(owner,scheduler_or_entry){BaseObject.apply(this,arguments);this.$owner=owner;if(BaseObject.is(scheduler_or_entry,"IProcessScheduler")){this.$scheduler=scheduler_or_entry;}else if(BaseObject.is(scheduler_or_entry,"CallContextEntry")){this.$scheduler=scheduler_or_entry.get_scheduler;}}CallContextEntry.Inherit(BaseObject,"CallContextEntry");CallContextEntry.Implement(IDataHolder);CallContextEntry.prototype.$owner=null;CallContextEntry.prototype.get_owner=function(){return this.$owner;};CallContextEntry.prototype.set_owner=function(v){this.$owner=v;};CallContextEntry.prototype.$description=null;CallContextEntry.prototype.get_scheduler=function(){return this.$scheduler;};CallContextEntry.prototype.set_scheduler=function(v){if(v!=null&&!BaseObject.is(v,"IProcessScheduler"))throw"Invalid argument, expected IProcessScheduler";this.$scheduler=v;};CallContextEntry.prototype.$typedStore=new InitializeObject("A dictionary by type");CallContextEntry.prototype.set_typed=function(obj){if(BaseObject.is(obj,"BaseObject")){this.$typedStore[obj.classType()]=obj;}};CallContextEntry.prototype.get_typed=function(_type){return this.$typedStore[_type];};CallContextEntry.prototype.obtain_typed=function(_type){var t=this.$typedStore[_type];if(t==null){t=new Function.classes[_type]();if(t!=null){this.$typedStore[_type]=t;}}return t;};CallContextEntry.prototype.currentAsyncResult=function(){if(BaseObject.is(this.$scheduler,"IProcessScheduler")){return this.$scheduler.currentAsyncResult();}return null;};