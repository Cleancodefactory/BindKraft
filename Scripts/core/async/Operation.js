function Operation(taskproc,timeout){BaseObject.apply(this,arguments);if(BaseObject.isCallback(taskproc)){var taskargs=[this].concat(Array.createCopyOf(arguments,2));this.async(function(){BaseObject.applyCallback(taskproc,taskargs);});}if(typeof timeout=="number"&&timeout>0){this.expire(timeout);}}Operation.Inherit(BaseObject,"Operation");Operation.Implement(IOperationHandlingCallbackImpl);Operation.prototype.$expiration=function(){if(!this.isOperationComplete()){this.CompleteOperation(false,"Operation timed out");jbTrace.log("An operation timed out");}};Operation.prototype.expire=function(milliseconds){this.discardAsync("OperationTimeOut");this.async(this.$expiration).after(milliseconds).key("OperationTimeOut").apply(this);};Operation.prototype.onBeforeOperationCompleted=function(){this.discardAsync("OperationTimeOut");};Operation.prototype.then=function(callback){if(BaseObject.isCallback(callback)){var old=this.get_completionroutine();if(BaseObject.is(old,"SugarryDispatcher")){old.tell(callback);}else if(BaseObject.isCallback(old)){var wrapper=new SugaryDispatcher(this);this.set_completionroutine(wrapper);if(!this.$handlingdone){wrapper.tell(old);}wrapper.tell(callback);if(this.$handlingdone&&this.isOperationComplete()){wrapper.invoke(this);}}else{this.set_completionroutine(callback);}}if(!this.$handlingdone&&this.isOperationComplete()){this.$invokeHandling();}return this;}.Description("Handles both success and failure through inspectionof the passed operation");Operation.prototype.whencomplete=function(){if(arguments.length!=0)throw"oncomplete takes 0 arguments and returns SugarryDispatcher that can notify multiple handlers by calling tell(handler) on it";var wrapper=this.get_completionroutine();if(BaseObject.is(wrapper,"SugaryDispatcher")){}else{wrapper=new SugaryDispatcher(this);var oldhandler=this.get_completionroutine();this.set_completionroutine(wrapper);if(this.$handlingdone&&this.isOperationComplete()){wrapper.invoke(this);}if(BaseObject.isCallback(oldhandler)&&!this.$handlingdone){wrapper.tell(oldhandler);}}if(!this.$handlingdone&&this.isOperationComplete()){this.$invokeHandling();}return wrapper;}.Description("Creates an event dispatcher tuned to advise newcomers and returns it - multiple handlers can be advised - see");Operation.prototype.onsuccess=function(callback){return this.whencomplete().onsuccess(callback);};Operation.prototype.success=Operation.prototype.onsuccess;Operation.prototype.onfailure=function(callback){return this.whencomplete().onfailure(callback);};Operation.prototype.failure=Operation.prototype.onfailure;Operation.prototype.complete=function(anotherOp,result){return this.whencomplete().complete(anotherOp,result);};Operation.prototype.transfer=function(anotherOp){return this.whencomplete().transfer(anotherOp);};Operation.prototype.succeed=function(anotherOp,result){return this.whencomplete().succeed(anotherOp,result);};Operation.prototype.fail=function(anotherOp,errinfo){return this.whencomplete().fail(anotherOp,errinfo);};Operation.From=function(x){if(BaseObject.is(x,"Operation")){return x;}else{var op=new Operation();op.CompleteOperation(true,x);return op;}};Operation.Failed=function(desc){var op=new Operation();op.CompleteOperation(false,desc);return op;};