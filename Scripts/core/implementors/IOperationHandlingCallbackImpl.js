function IOperationHandlingCallbackImpl(){}IOperationHandlingCallbackImpl.InterfaceImpl(IOperationHandling,"IOperationHandlingCallbackImpl");IOperationHandlingCallbackImpl.classInitialize=function(cls,force){if(force!="force"){if(Class.is(cls,"IOperation")||Class.is(cls,"IOperationHandling")||Class.is(cls,"IOperationReset")){throw"IOperation or/and IOperationHandling are already implemented and this implementer would replace their implementation if it continues, use force if this is intended";}}cls.Implement(IOperation);cls.Implement(IOperationReset);cls.Implement(IOperationHandling);cls.Implement(IOperationHandlingCallbacks);cls.prototype.$operationCompleted=false;cls.prototype.$operationSuccess=false;cls.prototype.$operationErrorInfo=null;cls.prototype.$operationResult=null;IOperation.prototype.$operationdescription=null;IOperation.prototype.getOperationDescription=function(){if(this.$operationdescription==null){this.$operationdescription=new OperationDescription();}return this.$operationdescription;};cls.prototype.isOperationComplete=function(){return this.$operationCompleted;};cls.prototype.isOperationSuccessful=function(){if(!this.$operationCompleted)return null;return this.$operationSuccess==true;};cls.prototype.getOperationErrorInfo=function(){if(this.$operationCompleted){if(!this.$operationSuccess){return this.$operationErrorInfo;}else{throw"The operation is successful, errorInfo cannot be requested in that state";}}else{throw"The operation is not completed.";}};cls.prototype.getOperationResult=function(){if(this.$operationCompleted){if(this.$operationSuccess){return this.$operationResult;}else{throw"The operation has failed, result cannot be requested in that state";}}else{throw"The operation is not completed.";}};cls.prototype.CompleteOperation=function(success,errorinfo_or_data){if(this.isOperationComplete()){throw"The operation is already complete";}this.$operationCompleted=true;if(success){this.$operationSuccess=true;this.$operationResult=errorinfo_or_data;}else{this.$operationSuccess=false;this.$operationErrorInfo=errorinfo_or_data;}this.onCompleteOperation();};cls.prototype.OperationReset=function(){this.CompleteOperation(false,{description:"Operation forcibly reset"});this.$operationCompleted=false;this.$operationErrorInfo=null;this.$operationResult=null;this.$operationSuccess=false;this.$handlingdone=false;return this;};cls.prototype.OperationClear=function(){this.OperationReset();this.$completionroutine=null;return this;};cls.prototype.$handlingdone=false;cls.prototype.$invokeHandling=function(){var cr=this.get_completionroutine();if(cr!=null){this.$handlingdone=true;var r=BaseObject.callCallback(cr,this);return r;}};cls.prototype.onBeforeOperationCompleted=function(){};cls.prototype.onAfterOperationCompleted=function(){};cls.prototype.onCompleteOperation=function(){this.onBeforeOperationCompleted();this.$invokeHandling();this.onAfterOperationCompleted();};cls.prototype.$completionroutine=null;cls.prototype.get_completionroutine=function(){return this.$completionroutine;};cls.prototype.set_completionroutine=function(v){if(BaseObject.isCallback(v)){this.$completionroutine=v;}else if(v==null){this.$completionroutine=null;}else{throw"Completion routine must be a valid callback (function, delegate, dispatcher etc.) or null, callbacks are either Function or objects supporting IInvokeWithArgsArray interface.";}};};