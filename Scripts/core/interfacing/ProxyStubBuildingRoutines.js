/*
	Contains low level routines for proxy and stub building. For better readability these are called by the classes that use them, leaving the bulk of the
	complicated code here.
*/

var ProxyStubBuildingRoutines = {
	

	// These are designed for local proxy generation first. The future implementation of remoting proxies may need separate implementation

	trivialMethodProxy: function(key) { return new Function('return this.$instance.' + key + '.apply(this.$instance, arguments);'); },
	buildProxyClass: function(_baseProxyDef, classDef, ifaceDef, _methodBody) {
		var baseProxyDef = _baseProxyDef || Class.getClassDef($Requestable_BaseProxy);
		if (!Class.is(baseProxyDef, "$Requestable_BaseProxy") ||
			!Class.is(classDef, Class.getInterfaceName(ifaceDef))) {
				throw "buildProxyClass requires all its parameters to be non null and of the correct types: $Requestable_BaseProxy, class implementing the interface from the next parameter, requestable interface definition";
		}
		if (_methodBody != null && !BaseObject.isCallback(_methodBody)) {
			return null;
		}
		var methodBody = _methodBody || IRequestInterface.trivialMethodProxy;
		var className = classDef.classType;
		var proxyName = baseProxyDef.classType;
		var ifaceName = ifaceDef.classType;
		proxyClassName = proxyName + "_" + ifaceName + "_" + className;
		var cls = Class.getClassDef(proxyClassName);
		if (cls == null) {
			// Not created yet - create it now
			cls = new Function("instance","transport",
			'$Requestable_BaseProxy.call(this,instance,transport); this.$initializeProxy();');
			cls.Inherit(baseProxyDef, proxyClassName);
			cls.Implement(ifaceDef);
			for (var key in ifaceDef.prototype) {
				if (key != "constructor" && key != "Release") {
					if (typeof ifaceDef.prototype[key] == "function") {
						cls.prototype[key] = BaseObject.callCallback(methodBody,key); // Generate the proxy method
					} else if (BaseObject.is(ifaceDef.prototype[key], "InitializeEvent")) {
						cls.prototype[key] = new InitializeEvent("autogenerated event proxy");
					}
				}
			}
		}
		return cls;
	}



/*
	The architecture plans are somewhat changed and this code is kept in comments mostly as reference for the people who worked and will work on this topic.
	TODO: Please remove these when this is no longer needed by anyone

	Helpers to use in the implementation of proxy/stub builders
	These methods provide one way to do this. One can implement proxy builders in a completely different manner without using any of these!
	
	The proxy is on the side where the actual object is, the stub is on the side of the client
	When both are on the same system the proxy and the stub can be one and the same.

// Not complete - a better performing approach is implemented below this code
IRequestInterface.buildProxy = function(instance, _ifacedef, transport) {
	var ifacedef = Class.getInterfaceDef(_ifacedef);
	if (!Class.isrequestable(ifacedef)) {
		throw "IRequestInterface.buildProxy: The specified interface (" + Class.getInterfaceName(ifacedef) + ") is not requestable.";
	}
	if (BaseObject.is(instance, ifacedef)) {
		//var proxy = new 
		for (var k in ifacedef.prototype) {
			var m = ifacedef[k]; // The members
			if (typeof m == "function") {
				
			} else {
				throw "IRequestInterface.buildProxy: Unsupported member (" + k + ") type in " + (typeof m) + "interface (" + Class.getInterfaceName(ifacedef) + ")";
			}
		}
	} else {
		if (instance == null) {
			throw "IRequestInterface.buildProxy: The instance is null";
		} else if (BaseObject.is(instance, "BaseObject")) {
			throw "IRequestInterface.buildProxy: The instance (" + instance.getFullTypeName() + ")specified interface (" + Class.getInterfaceName(ifacedef) + ") is not requestable.";
		} else {
			throw "IRequestInterface.buildProxy: The instance is not BaseObject derived (" + (typeof instance) + ")";
		}
	}
}
*/
	
	
/*
	Reminders for old ideas - will be removed

$CreateStub: function(iface, transmitter) { },
CreateDummyProxy: function(iface, instance) {
},
$CreateDummyProxy: function(ifacedef, iface_instance) {
	var proxy = new $Requestable_BaseProxy();
	for (var k in ifacedef.prototype) {
	}
}
*/
	
	
};