function Connector(addr,host,options){BaseObject.apply(this,arguments);this.$data=addr;this.host=host;this.$options=options;this.applyOptions();}Connector.Inherit(BaseObject,"Connector").Implement(IParameters);Connector.prototype.obliterate=function(bFull){BaseObject.prototype.obliterate.call(this,bFull);};Connector.Create=function(connectorType,address,host,options){var conn=Class(connectorType).createInstance(address,host,options);if(BaseObject.is(conn,"Connector"))return conn;return null;}.Description("Creates a connector of the given type with the parameters supplied (like doing so with new, but from the type supplied as string.). If there is no such class or if it is not a Connector returns null").Param("connectorType","The type of the connector desired e.g. AjaxXmlConnector, FastProcConnector etc.").Param("address","The address string for the new connector.").Param("host","The bindhost for the new connector, must be an instance of a BaseObject derived class").Param("options","plain object with options - see the information about Connector in the documentation or the comments in the source code.").Returns("The new initialized connector or null if the class does not exist or it is not a connector");Connector.prototype.createNewConnector=function(){return Class(this.classType()).createInstance(this.$data,this.host,this.$options);}.Description("Creates a new connector with the same settings. A connector can be reused, but to do this safely one needs to be careful with its parameters, when in doubt - use a clone through this method.");Connector.prototype.Helper=function(helperprotocol){if(helperprotocol==null)return null;return ConnectorHelperRegister.Default().GetHelper(this,helperprotocol);};Connector.prototype.isAsync=false;Connector.prototype.isBound=false;Connector.prototype.hasFailed=false;Connector.prototype.errorInfo=null;Connector.prototype.applyOptions=function(options){if(options!=null&&typeof options=="object"){if(this.$options!=null){this.$options=BaseObject.CombineObjects(this.$options,options);}else{this.$options=options;}}if(this.$options!=null){if(this.$options.delay>0){this.$optiondelay=this.$options.delay;}}};Connector.prototype.resetState=function(newData){this.isBound=false;this.hasFailed=false;this.errorInfo=null;if(arguments.length>0){this.set_address(newData);}};Connector.prototype.$data=null;Connector.prototype.get_address=function(){return this.$data;};Connector.prototype.set_address=function(v){this.$data=v;this.isBound=false;};Connector.prototype.$optiondelay=500;Connector.prototype.get_optiondelay=function(){return this.$optiondelay;};Connector.prototype.set_optiondelay=function(v){if(typeof v=="number"&&v>=0){this.$optiondelay=v;}};Connector.prototype.$resource=null;Connector.prototype.get_resource=function(idx){if(idx!=null){return this.$resource[idx];}else{return this.$resource;}};Connector.prototype.set_resource=function(idx,v){if(arguments.length>1){if(idx!=null){this.$resource[idx]=v;}else{this.$resource=v;}}else{this.$resource=idx;}};Connector.prototype.$parameters=null;Connector.prototype.get_parameters=function(idx){if(idx!=null){return this.$parameters[idx];}else{return this.$parameters;}};Connector.prototype.set_parameters=function(idx,v){var newval=v;if(arguments.length>1){if(idx!=null){if(this.$parameters==null){this.$parameters={};}this.$parameters[idx]=v;this.isBound=false;return;}else{newval=v;}}else{newval=idx;}if(this.$parameters!=null&&typeof this.$parameters=="object"&&typeof newval=="object"){this.$parameters=BaseObject.CombineObjects(this.$parameters,newval);}else{this.$parameters=newval;}this.isBound=false;}.Description("The indexed parameters property setter has a specific behavior - when you set an object and there are some parameters (object already existing) it will combine the two objects, replace any values that come from the new parameters. When you set null, this will clear all the parameters. Additionally it supports the standard indexed property behavior.");Connector.prototype.$cloneRequest=function(){return{$data:this.$data,$parameters:this.$parameters!=null?BaseObject.DeepClone(this.$parameters):null,$host:this.host};};Connector.prototype.$compareRequests=function(req1,req2){var r1=req1||{$data:this.$data,$parameters:this.$parameters,$host:this.host};var r2=req2||{$data:this.$data,$parameters:this.$parameters,$host:this.host};if(r1!=null&&r2!=null){if(r1==r2)return true;if(r1.$data!=r2.$data)return false;if(r1.$host!=r2.$host)return false;}else if(r1==null&&r2==null){return true;}return false;};Connector.prototype.$actionsInProgress=0;Connector.prototype.$reportResult=function(success,resource,errorInfo_optional,callback){this.$actionsInProgress=this.$actionsInProgress>0?this.$actionsInProgress-1:0;if(this.$options!=null&&this.$options.last&&this.$actionsInProgress>0){success=false;errorInfo_optional="Multiple calls";}this.errorInfo=null;if(success){this.$resource=resource;this.isBound=true;this.hasFailed=false;BaseObject.callCallback(callback,this.$resource);}else{this.$resource=null;this.isBound=false;this.hasFailed=true;this.errorInfo=errorInfo_optional;BaseObject.callCallback(callback,null,false,errorInfo_optional);}};Connector.prototype.resolve=function(callback){throw"Connector: not implemented! The Connector class is an abstract parent for all connectors, please use one of them.";};Connector.prototype.bind=function(callback){if(this.$options!=null){if(this.$options.singlelast&&this.$actionsInProgress>0){}if(this.$options.single&&this.$actionsInProgress>0)return false;}this.$actionsInProgress++;if(this.isAsync){if(this.isBound){BaseObject.callCallback(callback,this.$resource);return this.$resource;}else{if(this.hasFailed){BaseObject.callCallback(callback,null,false,this.errorInfo);return null;}else{this.resolve(callback);return true;}}}else{if(!this.isBound&&!this.hasFailed){if(!this.resolve()){this.$reportResult(false,null,this.errorInfo,callback);return null;}else{this.$reportResult(true,this.$resource,null,callback);return this.$resource;}}else if(this.isBound){BaseObject.callCallback(callback,this.$resource);return this.$resource;}else if(this.hasFailed){BaseObject.callCallback(callback,null,false,this.errorInfo);return null;}else{throw"Connector: Impossible error!!! The one who made me is obvioulsy stupid!";}return null;}};Connector.prototype.update=function(callback){throw"Connector: not implemented! This class does not Implement update!";};Connector.prototype.store=function(callback){if(this.isAsync){this.update(callback);return true;}else{if(!this.update()){this.$reportResult(false,null,this.errorInfo);return null;}else{this.$reportResult(true,this.$resource,null,callback);return this.$resource;}}};