function CommandContext(args){BaseObject.apply(this,arguments);var arg;for(var i=0;i<arguments.length;i++){arg=arguments[i];if(BaseObject.is(arg,"CommandReg")){this.$commands=arg;}else if(BaseObject.is(arg,"IAppBase")){this.$application=arg;}else if(BaseObject.is(arg,"IEnvironmentContext")){this.$environment=arg;}else if(typeof arg=="object"){this.$custom=arg;}}}CommandContext.Inherit(BaseObject,"CommandContext");CommandContext.Implement(ICommandContext);CommandContext.createGlobal=function(){var ctx=new CommandContext(CommandReg.Global(),EnvironmentContext.Global());return ctx;};CommandContext.ImplementReadProperty("commands",new Initialize("Command register",null));CommandContext.ImplementReadProperty("environment",new Initialize("Environment context",null));CommandContext.ImplementReadProperty("application",new Initialize("current application",null));CommandContext.ImplementReadProperty("custom",new Initialize("Object that provides other APIs (as needed for the specific purpose)",null));CommandContext.prototype.isFunctional=function(){if(BaseObject.is(this.$commands,"CommandReg")&&BaseObject.is(this.$environment,"IEnvironmentContext")){return true;}return false;};CommandContext.$Global=null;CommandContext.Global=function(){if(this.$Global==null){this.$Global=new CommandContext(CommandReg.Global(),EnvironmentContext.Global());}return this.$Global;};