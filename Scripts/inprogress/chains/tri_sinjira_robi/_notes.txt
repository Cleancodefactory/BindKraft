/*
	XML HTTP Request
	~~~~~~~~~~~~~~~~
	//event handlers
	* onreadystatechange: An EventHandler that is called whenever the readyState attribute changes.
	* ontimeout: Registered handler to be executed upon timeout;
	
	//fields	
	* readyState: Returns an unsigned short, the state of the request.
	* response: Returns an ArrayBuffer, Blob, Document, JavaScript object, or a DOMString, depending on the value of XMLHttpRequest.responseType. that contains the response entity body.
	* responseURL: The value of responseURL will be the final URL obtained after any redirects;
	* responseXML: A Document containing the nodes resulting from parsing XML or HTML received using XMLHttpRequest, or null if no data has been received or the data is not of the correct type;
	* status: The unsigned short status code;
	* statusText: Short status word, send with the status code (200 OK);
	* timeout: Is an unsigned long representing the number of milliseconds a request can take before automatically being terminated;
	//refs
	* upload: Is an XMLHttpRequestUpload, representing the upload process;
	Notes: There is a polyfill to support sendBinary, which is normally not available
*/

//a described data instance has an aspect by definition

//chainware for settings- described datas


/*	
	Notes:
		* We will use a settings object - like the one from jQuery. The settings object is helpfull for fast request construction.
		* There needs to be a chainware to process the settings object and add its parts as described data pieces.
		* Add request headers and get response headers;
		* 
		
	jQuery.ajax settings object:
		Of interest								Not of interest
		-------------------------------------------------------
		!!!!!!!!! - JSONP - ????????
		* jsonp
		* jsonpCallback
		
		* url: url,		
		* dataType: (Ex: 'xml') The data type, that we are expecting as a result from the request. It can take multiple values, separated by a space symbol,
		* contentType: "application/json; charset=utf-8", // we aresending stringified json as post body The default content-type is "application/x-www-form-urlencoded", meaning that everything passed in the data section will be url encoded,
		* data: data,
		* success: callback,
		* async: !sync, //Async or sync requests
		* failonoperations: failonoperations,
		* isbackgroundrequest: isBackgroundRequest,
			?	* cache: ((cache) ? true : false): If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending "_={timestamp}" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET.
		* headers: A key-value collection of headers to attach,
		* crossDomain: flag,
		* context: !!!!!!!! This is the owner in the new context - In jquery, the context is injected as "this" in callbacks.
			?	* accepts: ! This is used in conjunction with the converters. You can specify an array of accepted content-types. The converters, convert the data to something else.
			?	* converters: A list of functions, which specify how a accepted type (from the accepts property) should be converted to some other custom, user-defined type.
		* ifModified: Allow the request to be successful only if the response has changed since the last request. That's right - HAS CHANGED,
		* type/method: The HTTP method. (Ex: "POST"),
		* statusCode: An object, containing callbacks, for each specified status code,
		* timeout: The XMLHttpRequest object gets invalidated, if the response hasn't arrived after the timeout expires. The default timeout is 0 = inf,
		* xhr: A reference to the native ajax xml http request object,
		* xhrFields: Contains key-value pairs, to set on the native XHR object,
												* traditional: Flag, indication whether or not to use the traditional jquery parametrization.
													note: Most likely, we will use the modern one. It is yet unclear, whether we will go with the shallow one, or with the deep one.
	
	Note: Read more at: http://api.jquery.com/jquery.ajax/.
	jQuery parametrisation:
		// <=1.3.2:
		$.param({ a: [ 2, 3, 4 ] }); // "a=2&a=3&a=4"
		// >=1.4:
		$.param({ a: [ 2, 3, 4 ] }); // "a[]=2&a[]=3&a[]=4"
		 
		// <=1.3.2:
		$.param({ a: { b: 1, c: 2 }, d: [ 3, 4, { e: 5 } ] });
		// "a=[object+Object]&d=3&d=4&d=[object+Object]"
		 
		// >=1.4:
		$.param({ a: { b: 1, c: 2 }, d: [ 3, 4, { e: 5 } ] });
		// "a[b]=1&a[c]=2&d[]=3&d[]=4&d[2][e]=5"
	
	Content type is deep shit!!!!!	???????????????
		contentType (default: 'application/x-www-form-urlencoded; charset=UTF-8')
		Type: Boolean or String
		When sending data to the server, use this content type. Default is "application/x-www-form-urlencoded; charset=UTF-8", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application/x-www-form-urlencoded, multipart/form-data, or text/plain will trigger the browser to send a preflight OPTIONS request to the server.
	
	QUESTION: Do we want deep parametrisation in the form of:
		{ a: { b: 1, c: 2 }, d: [ 3, 4, { e: 5 } ] } => "a[b]=1&a[c]=2&d[]=3&d[]=4&d[2][e]=5"
	
	ANSWER: No for now.
*/

//create an app, which can send files, receive files, list items, etc...