function TemplateFetcher(connector_or_string,legacyLookup,extractor){BaseObject.apply(this,arguments);this.$templatesource=connector_or_string;if(BaseObject.isCallback(legacyLookup)){this.$trylegacy=false;this.templateExtractorCallback=legacyLookup;}else{this.$trylegacy=legacyLookup;if(BaseObject.isCallback(extractor)){this.templateExtractorCallback=extractor;}}}TemplateFetcher.Description("Initializes a new instance of TemplateFetcher").Param("connector_or_string","Currently a connector instance or a string - name of a template. In future more options may be available").Param("legacyLookup","Can be omitted. If it is present and true-like, enables legacy template search by id or CSS class name, using the connector_or_string unchanged").Param("extractor","Optional, can be specified as 2-nd argument if legacyLookup is omitted. Specifies an extractor callback responsible to extract the actual template from the data fetched. See details in the comments.");TemplateFetcher.Inherit(BaseObject,"TemplateFetcher");TemplateFetcher.Implement(ITemplateFetcher);TemplateFetcher.prototype.$templatesource=null;TemplateFetcher.prototype.templateExtractorCallback=null;TemplateFetcher.prototype.$templateExtractorCallback=function(data,source){if(BaseObject.isCallback(this.templateExtractorCallback)){return BaseObject.callCallback(this.templateExtractorCallback(data,source));}else{return data;}};TemplateFetcher.prototype.fetchTemplate=function(callback){var tml;if(BaseObject.is(this.$templatesource,"Connector")){this.$templatesource.bind(function(resource,err){if(resource=null&&err===false){BaseObject.callCallback(callback,null);}else{BaseObject.callCallback(callback,this.$templateExtractorCallback(resource,this.templateSource));return;}});}else if(BaseObject.is(this.$templatesource,"string")){var tn=ITemplateSourceImpl.ParseTemplateName(this.$templatesource);tml=ITemplateSourceImpl.GetGlobalTemplate(tn,{legacy:this.$trylegacy});if(tml!=null){BaseObject.callCallback(callback,this.$templateExtractorCallback(resource,this.templateSource));}}};